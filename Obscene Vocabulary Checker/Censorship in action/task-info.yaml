type: remote_edu
files:
- name: main.go
  visible: true
  text: "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\
    \n)\n\nfunc main() {\n\t// reading file name input\n\tvar fileName string\n\t\
    fmt.Scan(&fileName)\n\n\t// opening file\n\tfile, err := os.Open(fileName)\n\t\
    if err != nil {\n\t\tfmt.Println(err)\n\t}\n\tdefer file.Close()\n\n\t// create\
    \ scanner and split by words\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\
    \n\t// reading taboo word input\n\tvar tabooWord string\n\tfmt.Scan(&tabooWord)\n\
    \ttabooWord = strings.ToLower(tabooWord)\n\n\t// check each words\n\tvar tabooWordExist\
    \ bool\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == tabooWord\
    \ {\n\t\t\ttabooWordExist = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif err := scanner.Err();\
    \ err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(tabooWordExist)\n}"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from typing import List

    from hstest import CheckResult, dynamic_test, StageTest, TestCase, TestedProgram

    FILENAME = 'forbidden_words.txt'
    words = 'awful\natrocious\nharsh\ncrummy\ndreadful\nlousy'

    T = True
    F = False
    MSG_CENS = 'Bad words should be censored, according to their length'
    MSG_NO_CENS = 'No need to censor non-obscene words'
    WORDS_TO_CHECK = (('awful', T), ('scrumble', F), ('HARSH', T), ('scream', F),
                      ('atrOCIOus', T), ('LOSSLESS', F), ('dreadful', T), ('crumpet', F),
                      ('cRuMmy', T), ('hard', F), ('lousy', T), ('dream', F))


    class CheckerStage3Test(StageTest):
        def exemplary_output(self, word, flag):
            if flag:
                cens = '*' * len(word)
                return cens
            else:
                return word

        def generate(self) -> List[TestCase]:
            return [
                TestCase(dynamic_testing=self.test1, files={FILENAME: words})
            ]

        def test1(self):

            pr = TestedProgram()
            pr.start()
            pr.execute(FILENAME)
            for pair in WORDS_TO_CHECK:
                word, flag = pair
                out = pr.execute(word)
                if out.strip() != self.exemplary_output(word, flag):
                    if flag:
                        return CheckResult.wrong(MSG_CENS)
                    else:
                        return CheckResult.wrong(MSG_NO_CENS)
            out = pr.execute('exit')
            if 'bye' not in out.strip().lower():
                return CheckResult.wrong('The program should be polite')
            return CheckResult.correct()


    if __name__ == '__main__':
        CheckerStage3Test().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/201/stages/1000/implement#comment
check_profile: hyperskill_go
status: Solved
record: 2
